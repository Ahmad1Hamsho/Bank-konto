{"version":3,"sources":["bankComponent/EinzahlenButton.js","bankComponent/AuszahlenButton.js","bankComponent/Homepage.js","App.js","serviceWorker.js","index.js"],"names":["EinzahlenButton","click","top","left","right","bottom","style","buttom","onClick","className","AuszahlenButton","Homepage","state","inputValue","parseInt","Kontostand","handelChange","bind","e","this","setState","target","value","color","type","onChange","Component","App","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2VAaeA,G,MAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAKC,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,MAAOC,EAA5B,EAA4BA,OAA5B,OACtB,4BACEC,MAAO,CAAEJ,IAAKA,EAAKC,KAAMA,EAAMC,MAAOA,EAAOG,OAAQF,GACrDG,QAASP,EACTQ,UAAU,mBAHZ,eCUaC,G,MAZS,SAAC,GAAyC,IAAvCT,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAClD,OACE,4BACEC,MAAO,CAAEJ,IAAKA,EAAKC,KAAMA,EAAMC,MAAOA,EAAOG,OAAQF,GACrDG,QAASP,EACTQ,UAAU,mBAHZ,eC8DWE,G,wDA7Db,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,WAAYC,SAAS,GACrBC,WAAYD,SAAS,IAGvB,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBAPR,E,yDASDC,GACXC,KAAKC,SAAS,CAAEP,WAAYK,EAAEG,OAAOC,U,+BAG7B,IAAD,OACP,OACE,6BAASb,UAAU,YACjB,8CACA,wBACEA,UAAU,gBACVH,MACEa,KAAKP,MAAMG,WAAa,EACpB,CACEQ,MAAO,OAET,CAAEA,MAAO,UAGdJ,KAAKP,MAAMG,WAVd,KAYA,2BACES,KAAK,SACLF,MAAOH,KAAKP,MAAMC,WAClBY,SAAUN,KAAKH,eAEjB,yBAAKP,UAAU,WACb,kBAAC,EAAD,CACER,MAAO,kBACL,EAAKmB,SAAS,CACZL,WAAa,EAAKH,MAAMG,YAAcD,SACpC,EAAKF,MAAMC,YAEbA,WAAY,OAIlB,kBAAC,EAAD,CACEZ,MAAO,kBACL,EAAKmB,SAAS,CACZL,WAAYD,SACT,EAAKF,MAAMG,YAAc,EAAKH,MAAMC,YAEvCA,WAAY,a,GApDLa,cCSRC,EATH,WACV,OACE,iCACE,yBAAKC,IAAI,aAAanB,UAAU,SAChC,kBAAC,EAAD,QCIcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.179213ad.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./einzahlenButton.css\";\r\n\r\nconst EinzahlenButton = ({ click, top, left, right, bottom }) => (\r\n  <button\r\n    style={{ top: top, left: left, right: right, buttom: bottom }}\r\n    onClick={click}\r\n    className=\"einzahlenButton\"\r\n  >\r\n    Einzahlen\r\n  </button>\r\n);\r\n\r\nexport default EinzahlenButton;\r\n","import React from \"react\";\r\nimport \"./auszahlenButton.css\";\r\nconst AuszahlenButton = ({ click, top, left, right, bottom }) => {\r\n  return (\r\n    <button\r\n      style={{ top: top, left: left, right: right, buttom: bottom }}\r\n      onClick={click}\r\n      className=\"auszahlenButton\"\r\n    >\r\n      Auszahlen\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AuszahlenButton;\r\n","import React, { Component } from \"react\";\r\nimport EinzahlenButton from \"./EinzahlenButton\";\r\nimport AuszahlenButton from \"./AuszahlenButton\";\r\nimport \"./homepage.css\";\r\nclass Homepage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      inputValue: parseInt(0),\r\n      Kontostand: parseInt(0),\r\n    };\r\n\r\n    this.handelChange = this.handelChange.bind(this);\r\n  }\r\n  handelChange(e) {\r\n    this.setState({ inputValue: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"homepage\">\r\n        <h1>Dein Girokonto</h1>\r\n        <h2\r\n          className=\"betragDisplay\"\r\n          style={\r\n            this.state.Kontostand < 0\r\n              ? {\r\n                  color: \"red\",\r\n                }\r\n              : { color: \"white\" }\r\n          }\r\n        >\r\n          {this.state.Kontostand}$\r\n        </h2>\r\n        <input\r\n          type=\"number\"\r\n          value={this.state.inputValue}\r\n          onChange={this.handelChange}\r\n        />\r\n        <div className=\"buttons\">\r\n          <EinzahlenButton\r\n            click={() =>\r\n              this.setState({\r\n                Kontostand: (this.state.Kontostand += parseInt(\r\n                  this.state.inputValue\r\n                )),\r\n                inputValue: 0,\r\n              })\r\n            }\r\n          />\r\n          <AuszahlenButton\r\n            click={() =>\r\n              this.setState({\r\n                Kontostand: parseInt(\r\n                  (this.state.Kontostand -= this.state.inputValue)\r\n                ),\r\n                inputValue: 0,\r\n              })\r\n            }\r\n          />\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Homepage from \"./bankComponent/Homepage\";\n\nconst App = () => {\n  return (\n    <section>\n      <img src=\"dollar.png\" className=\"logo\" />\n      <Homepage />\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}